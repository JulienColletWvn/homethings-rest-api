// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: devices.sql

package db

import (
	"context"
)

const createDevice = `-- name: CreateDevice :one
INSERT INTO devices (id, name, location)
VALUES ($1, $2, $3)
RETURNING id, created_at, updated_at, name, location
`

type CreateDeviceParams struct {
	ID       string `json:"id"`
	Name     string `json:"name"`
	Location string `json:"location"`
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, createDevice, arg.ID, arg.Name, arg.Location)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Location,
	)
	return i, err
}

const getDevice = `-- name: GetDevice :one
SELECT id, created_at, updated_at, name, location
FROM devices
WHERE devices.id = $1
`

func (q *Queries) GetDevice(ctx context.Context, id string) (Device, error) {
	row := q.db.QueryRow(ctx, getDevice, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Location,
	)
	return i, err
}

const getDevices = `-- name: GetDevices :many
SELECT id, created_at, updated_at, name, location
FROM devices
`

func (q *Queries) GetDevices(ctx context.Context) ([]Device, error) {
	rows, err := q.db.Query(ctx, getDevices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Location,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
