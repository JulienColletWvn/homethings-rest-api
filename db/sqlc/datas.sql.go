// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: datas.sql

package db

import (
	"context"
	"database/sql"
)

const createData = `-- name: CreateData :one
INSERT INTO datas (data_type_id, value)
VALUES ($1, $2)
RETURNING id, created_at, data_type_id, value
`

type CreateDataParams struct {
	DataTypeID sql.NullInt32 `json:"data_type_id"`
	Value      float64       `json:"value"`
}

func (q *Queries) CreateData(ctx context.Context, arg CreateDataParams) (Data, error) {
	row := q.db.QueryRow(ctx, createData, arg.DataTypeID, arg.Value)
	var i Data
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.DataTypeID,
		&i.Value,
	)
	return i, err
}

const getDatas = `-- name: GetDatas :many
SELECT datas.created_at,
    datas."value",
    data_types."key",
    data_types.unit,
    devices."name",
    devices."location"
FROM datas
    JOIN data_types ON data_types.id = datas.data_type_id
    JOIN devices ON devices.id = data_types.device_id
WHERE data_types.device_id = $1
    AND data_types.key = $2
    AND datas.created_at BETWEEN $3 AND $4
ORDER BY datas.created_at ASC
`

type GetDatasParams struct {
	DeviceID    sql.NullString `json:"device_id"`
	Key         string         `json:"key"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	CreatedAt_2 sql.NullTime   `json:"created_at_2"`
}

type GetDatasRow struct {
	CreatedAt sql.NullTime `json:"created_at"`
	Value     float64      `json:"value"`
	Key       string       `json:"key"`
	Unit      string       `json:"unit"`
	Name      string       `json:"name"`
	Location  string       `json:"location"`
}

func (q *Queries) GetDatas(ctx context.Context, arg GetDatasParams) ([]GetDatasRow, error) {
	rows, err := q.db.Query(ctx, getDatas,
		arg.DeviceID,
		arg.Key,
		arg.CreatedAt,
		arg.CreatedAt_2,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDatasRow
	for rows.Next() {
		var i GetDatasRow
		if err := rows.Scan(
			&i.CreatedAt,
			&i.Value,
			&i.Key,
			&i.Unit,
			&i.Name,
			&i.Location,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastData = `-- name: GetLastData :one
SELECT datas.created_at,
    datas."value",
    data_types."key",
    data_types.unit,
    devices."name",
    devices."location"
FROM datas
    JOIN data_types ON data_types.id = datas.data_type_id
    JOIN devices ON devices.id = data_types.device_id
WHERE data_types.device_id = $1
    AND data_types.key = $2
ORDER BY datas.created_at DESC
LIMIT 1
`

type GetLastDataParams struct {
	DeviceID sql.NullString `json:"device_id"`
	Key      string         `json:"key"`
}

type GetLastDataRow struct {
	CreatedAt sql.NullTime `json:"created_at"`
	Value     float64      `json:"value"`
	Key       string       `json:"key"`
	Unit      string       `json:"unit"`
	Name      string       `json:"name"`
	Location  string       `json:"location"`
}

func (q *Queries) GetLastData(ctx context.Context, arg GetLastDataParams) (GetLastDataRow, error) {
	row := q.db.QueryRow(ctx, getLastData, arg.DeviceID, arg.Key)
	var i GetLastDataRow
	err := row.Scan(
		&i.CreatedAt,
		&i.Value,
		&i.Key,
		&i.Unit,
		&i.Name,
		&i.Location,
	)
	return i, err
}
