// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: datas.sql

package db

import (
	"context"
	"database/sql"
)

const createData = `-- name: CreateData :one
INSERT INTO datas (data_type_id, value)
VALUES ($1, $2)
RETURNING id, created_at, updated_at, data_type_id, value
`

type CreateDataParams struct {
	DataTypeID sql.NullInt32 `json:"data_type_id"`
	Value      float64       `json:"value"`
}

func (q *Queries) CreateData(ctx context.Context, arg CreateDataParams) (Data, error) {
	row := q.db.QueryRow(ctx, createData, arg.DataTypeID, arg.Value)
	var i Data
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DataTypeID,
		&i.Value,
	)
	return i, err
}

const getAllDeviceDatas = `-- name: GetAllDeviceDatas :many
SELECT datas.id, created_at, updated_at, data_type_id, value, data_types.id, key, unit, device_id
FROM datas
    JOIN data_types ON datas.data_type_id = data_types.id
WHERE data_types.device_id = $1
`

type GetAllDeviceDatasRow struct {
	ID         int32          `json:"id"`
	CreatedAt  sql.NullTime   `json:"created_at"`
	UpdatedAt  sql.NullTime   `json:"updated_at"`
	DataTypeID sql.NullInt32  `json:"data_type_id"`
	Value      float64        `json:"value"`
	ID_2       int32          `json:"id_2"`
	Key        string         `json:"key"`
	Unit       string         `json:"unit"`
	DeviceID   sql.NullString `json:"device_id"`
}

func (q *Queries) GetAllDeviceDatas(ctx context.Context, deviceID sql.NullString) ([]GetAllDeviceDatasRow, error) {
	rows, err := q.db.Query(ctx, getAllDeviceDatas, deviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllDeviceDatasRow
	for rows.Next() {
		var i GetAllDeviceDatasRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DataTypeID,
			&i.Value,
			&i.ID_2,
			&i.Key,
			&i.Unit,
			&i.DeviceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeviceDatas = `-- name: GetDeviceDatas :many
SELECT datas.id, created_at, updated_at, data_type_id, value, data_types.id, key, unit, device_id
FROM datas
    JOIN data_types ON datas.data_type_id = data_types.id
WHERE data_types.device_id = $1
    AND data_types.key = $2
`

type GetDeviceDatasParams struct {
	DeviceID sql.NullString `json:"device_id"`
	Key      string         `json:"key"`
}

type GetDeviceDatasRow struct {
	ID         int32          `json:"id"`
	CreatedAt  sql.NullTime   `json:"created_at"`
	UpdatedAt  sql.NullTime   `json:"updated_at"`
	DataTypeID sql.NullInt32  `json:"data_type_id"`
	Value      float64        `json:"value"`
	ID_2       int32          `json:"id_2"`
	Key        string         `json:"key"`
	Unit       string         `json:"unit"`
	DeviceID   sql.NullString `json:"device_id"`
}

func (q *Queries) GetDeviceDatas(ctx context.Context, arg GetDeviceDatasParams) ([]GetDeviceDatasRow, error) {
	rows, err := q.db.Query(ctx, getDeviceDatas, arg.DeviceID, arg.Key)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDeviceDatasRow
	for rows.Next() {
		var i GetDeviceDatasRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DataTypeID,
			&i.Value,
			&i.ID_2,
			&i.Key,
			&i.Unit,
			&i.DeviceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
