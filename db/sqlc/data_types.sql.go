// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: data_types.sql

package db

import (
	"context"
	"database/sql"
)

const createDataType = `-- name: CreateDataType :one
INSERT INTO data_types (key, unit, device_id)
VALUES ($1, $2, $3)
RETURNING id, key, unit, device_id
`

type CreateDataTypeParams struct {
	Key      string         `json:"key"`
	Unit     string         `json:"unit"`
	DeviceID sql.NullString `json:"device_id"`
}

func (q *Queries) CreateDataType(ctx context.Context, arg CreateDataTypeParams) (DataType, error) {
	row := q.db.QueryRow(ctx, createDataType, arg.Key, arg.Unit, arg.DeviceID)
	var i DataType
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Unit,
		&i.DeviceID,
	)
	return i, err
}

const getDeviceDataTypes = `-- name: GetDeviceDataTypes :many
SELECT id, key, unit, device_id
FROM data_types
WHERE data_types.device_id = $1
`

func (q *Queries) GetDeviceDataTypes(ctx context.Context, deviceID sql.NullString) ([]DataType, error) {
	rows, err := q.db.Query(ctx, getDeviceDataTypes, deviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DataType
	for rows.Next() {
		var i DataType
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.Unit,
			&i.DeviceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
